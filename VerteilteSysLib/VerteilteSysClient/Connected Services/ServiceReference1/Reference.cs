//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VerteilteSysClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.IPluginService")]
    public interface IPluginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/DisplayAllPlugins", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/DisplayAllPluginsResponse")]
        string DisplayAllPlugins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/DisplayAllPlugins", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/DisplayAllPluginsResponse")]
        System.Threading.Tasks.Task<string> DisplayAllPluginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/UploadFile", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/UploadFileResponse")]
        string UploadFile(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/UploadFile", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/UploadFileResponse")]
        System.Threading.Tasks.Task<string> UploadFileAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/UsePlugin", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/UsePluginResponse")]
        string UsePlugin(string pluginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IPluginService/UsePlugin", ReplyAction="http://Microsoft.ServiceModel.Samples/IPluginService/UsePluginResponse")]
        System.Threading.Tasks.Task<string> UsePluginAsync(string pluginName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPluginServiceChannel : VerteilteSysClient.ServiceReference1.IPluginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PluginServiceClient : System.ServiceModel.ClientBase<VerteilteSysClient.ServiceReference1.IPluginService>, VerteilteSysClient.ServiceReference1.IPluginService {
        
        public PluginServiceClient() {
        }
        
        public PluginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PluginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PluginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PluginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DisplayAllPlugins() {
            return base.Channel.DisplayAllPlugins();
        }
        
        public System.Threading.Tasks.Task<string> DisplayAllPluginsAsync() {
            return base.Channel.DisplayAllPluginsAsync();
        }
        
        public string UploadFile(byte[] data) {
            return base.Channel.UploadFile(data);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileAsync(byte[] data) {
            return base.Channel.UploadFileAsync(data);
        }
        
        public string UsePlugin(string pluginName) {
            return base.Channel.UsePlugin(pluginName);
        }
        
        public System.Threading.Tasks.Task<string> UsePluginAsync(string pluginName) {
            return base.Channel.UsePluginAsync(pluginName);
        }
    }
}
